# -*- coding: utf-8 -*-
"""catsanddogs.002.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qqzRr04PmBtcw5fBiCxgMVL1UB1W56vn
"""

import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
from keras import layers
import tensorflow as tf
import numpy as np
import keras
import time
import os

model_name = 'catsanddogs.002'
tdfs_list_num = 414

IMG_SIZE = 224
BATCH_SIZE = 16
LABELS = ["cat", "dog"]
image_size = (IMG_SIZE, IMG_SIZE)

image_data_dir = 'images'
input_shape = image_size + (3,)

model_resolution = [ 256, 512, 728 ]
#model_resolution = [ 4 ]

epochs = 1  # default is 25

print('tensorflow version:', tf.__version__)
strategy = tf.distribute.MirroredStrategy()
print('Number of devices: {}'.format(strategy.num_replicas_in_sync))
#tfds.disable_progress_bar()
print(str(tfds.list_builders()[:tdfs_list_num]))

if not os.path.exists(image_data_dir):
  os.mkdir(path = image_data_dir)
os.listdir(path = image_data_dir)

(train_ds, validation_ds), metadata = tfds.load(
    name = 'cats_vs_dogs',
    split = ['train', 'train'],
    with_info = True,
    batch_size = BATCH_SIZE,
    as_supervised = True,
    download = True,
    data_dir = image_data_dir
)

os.listdir(path = image_data_dir)

print(train_ds)
print(validation_ds)

def format_data(image, label):
    image = tf.cast(image, tf.float32)
    # Normalize the pixel values
    # image = image / 255.0
    # Resize the image
    image = tf.image.resize(image, (IMG_SIZE, IMG_SIZE))
    return image, label

validation_ds = validation_ds.map(format_data)
train_ds = train_ds.map(format_data)

plt.figure(figsize=(int(IMG_SIZE/2), int(IMG_SIZE/2)))
for images, labels in train_ds.take(1):
  ax = plt.subplot(1, 1, 1)
  plt.imshow(np.array(images[0]).astype("uint8"))
  #plt.title(labels[0])
  plt.axis("on")

data_augmentation_layers = [
    layers.RandomFlip("horizontal"),
    layers.RandomRotation(0.1),
]


def data_augmentation(images):
    for layer in data_augmentation_layers:
        images = layer(images)
    return images

plt.figure(figsize=(int(IMG_SIZE/2), int(IMG_SIZE/2)))
for images, _ in train_ds.take(1):
        augmented_images = data_augmentation(images[0])
        ax = plt.subplot(1, 1, 1)
        plt.imshow(np.array(augmented_images).astype("uint8"))
        plt.axis("on")

inputs = keras.Input(shape=input_shape)
x = data_augmentation(inputs)
x = layers.Rescaling(1./255)(x)

#augmented_train_ds = train_ds.map(
#    lambda x, y: (data_augmentation(x, training=True), y))

# Apply `data_augmentation` to the training images.
train_ds = train_ds.map(
    lambda img, label: (data_augmentation(img), label),
    num_parallel_calls=tf.data.AUTOTUNE,
)

plt.figure(figsize=(int(IMG_SIZE/2), int(IMG_SIZE/2)))
for images, labels in train_ds.take(1):
  ax = plt.subplot(1, 1, 1)
  plt.imshow(np.array(images[0]).astype("uint8"))
  #plt.title(labels[0])
  plt.axis("on")

# Prefetching samples in GPU memory helps maximize GPU utilization.
train_ds = train_ds.prefetch(tf.data.AUTOTUNE)
validation_ds = validation_ds.prefetch(tf.data.AUTOTUNE)

def make_model(input_shape, num_classes):
    inputs = keras.Input(shape=input_shape)

    # Entry block
    x = layers.Rescaling(1.0 / 255)(inputs)
    x = layers.Conv2D(128, 3, strides=2, padding="same")(x)
    x = layers.BatchNormalization()(x)
    x = layers.Activation("relu")(x)

    previous_block_activation = x  # Set aside residual

    for size in model_resolution:
        x = layers.Activation("relu")(x)
        x = layers.SeparableConv2D(size, 3, padding="same")(x)
        x = layers.BatchNormalization()(x)

        x = layers.Activation("relu")(x)
        x = layers.SeparableConv2D(size, 3, padding="same")(x)
        x = layers.BatchNormalization()(x)

        x = layers.MaxPooling2D(3, strides=2, padding="same")(x)

        # Project residual
        residual = layers.Conv2D(size, 1, strides=2, padding="same")(
            previous_block_activation
        )
        x = layers.add([x, residual])  # Add back residual
        previous_block_activation = x  # Set aside next residual

    if len(model_resolution) == 3:
        x = layers.SeparableConv2D(1024, 3, padding="same")(x)
        x = layers.BatchNormalization()(x)
        x = layers.Activation("relu")(x)

    x = layers.GlobalAveragePooling2D()(x)

    if num_classes == 2:
        units = 1
    else:
        units = num_classes

    x = layers.Dropout(0.25)(x)
    # We specify activation=None so as to return logits
    outputs = layers.Dense(units, activation=None)(x)
    return keras.Model(inputs, outputs)


model = make_model(input_shape=input_shape, num_classes=2)
keras.utils.plot_model(model, show_shapes=True)

callbacks = [
    keras.callbacks.ModelCheckpoint("save_at_epoch_{epoch}.keras"),
]
model.compile(
    optimizer=keras.optimizers.Adam(3e-4),
    loss=keras.losses.BinaryCrossentropy(from_logits=True),
    metrics=[keras.metrics.BinaryAccuracy(name="acc")],
)
model.summary()

model.fit(
    x = train_ds,
    y = None,
    epochs = epochs,
    callbacks = callbacks,
    batch_size = BATCH_SIZE,
    validation_batch_size = BATCH_SIZE,
    verbose = 'auto',
    shuffle = True,
    validation_split = 0.0,
    validation_data = validation_ds,
    class_weight = None,
    sample_weight = None,
    initial_epoch = 0,
    steps_per_epoch = None,
    validation_steps = None,
    validation_freq = 1,
    max_queue_size = 10,
    workers = 1,
    use_multiprocessing = False
)

model.save(model_name + '.' + str(time.time()) + '.keras')

for images, labels in validation_ds.take(1):
  plt.imshow(np.array(images[0]).astype("uint8"))

  #img_array = keras.utils.img_to_array(images[0])
  #img_array = keras.ops.expand_dims(img_array, 0)  # Create batch axis

  img_array = np.expand_dims(np.array(images[0]).astype("uint8"), 0)
  predictions = model.predict(img_array)
  print(predictions)
  print(predictions.shape)
  score = float(tf.keras.activations.sigmoid(predictions[0][0]))
  print(f"This image is {100 * (1 - score):.2f}% cat and {100 * score:.2f}% dog.")